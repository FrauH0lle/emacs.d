#!/usr/bin/env sh
:; # -*- mode: emacs-lisp; lexical-binding: t -*-
:; case "$EMACS" in *term*) EMACS=emacs ;; *) EMACS="${EMACS:-emacs}" ;; esac
:; [ "$EMACS" = emacs ] && { type emacs >/dev/null 2>&1 || err=1; }
:; [ -n "$err" ] && { echo "Error: failed to run Emacs with command '$EMACS'"; echo; echo "Are you sure Emacs is installed and in your \$PATH?"; exit 1; } >&2
:; emacs="$EMACS ${DEBUG:+--debug-init} -q --no-site-file --batch"
:; $emacs --load "$0" -- "$@" || exit=$?
:; exit $exit

;; The above shebang does the following magic:

;; 1) #!/usr/bin/env sh
;;
;;    This shebang line tells the system to execute this script using the sh
;;    shell found in the system's PATH.

;; 2) :; # -*- mode: emacs-lisp; lexical-binding: t -*-
;;
;;    This line sets the Emacs Lisp mode and enables lexical binding. The :;
;;    part is a shell and Emacs Lisp compatibility trick. In shell, : is a no-op
;;    command, and ; separates commands. In Emacs Lisp, : is a keyword symbol
;;    literal, and ; starts a comment.

;; 3) :; case "$EMACS" in *term*) EMACS=emacs ;; *) EMACS="${EMACS:-emacs}" ;; esac
;;
;;    This line checks if the EMACS environment variable is set and contains
;;    "term". If so, it sets EMACS to "emacs". Otherwise, it sets EMACS to its
;;    current value or "emacs" if not set.

;; 4) :; [ "$EMACS" = emacs ] && { type emacs >/dev/null 2>&1 || err=1; }
;;
;;    This line sets up the EMACS environment variable to contain the Emacs
;;    command. If the command cannot be found, the err variable is set to 1.

;; 5) [ -n "$err" ] && { echo "Error: failed to run Emacs with command '$EMACS'"; echo; echo "Are you sure Emacs is installed and in your \$PATH?"; exit 1; } >&2
;;
;;    If err is not empty, it prints an error message and exits with status code
;;    1.

;; 6) :; emacs="$EMACS ${DEBUG:+--debug-init} -q --no-site-file --batch"
;;
;;    This line sets up the emacs variable to contain the Emacs command with
;;    appropriate flags. If the DEBUG environment variable is set, the
;;    --debug-init flag is added. The -q flag means no initialization file is
;;    loaded, --no-site-file skips loading site files, and --batch runs Emacs in
;;    non-interactive mode.

;; 7) :; $emacs --load "$0" -- "$@" || exit=$?
;;
;;    This line runs Emacs, loading the script itself ($0) and passing any
;;    command-line arguments ("$@"). If the command fails, it stores the exit
;;    status in the exit variable.

;; 8) :; exit $exit
;;
;;    Finally, this line exits the script with the exit status stored in the
;;    exit variable.


;; In CLI sessions, prefer correctness over performance.
(setq load-prefer-newer t)

;; Process command line arguments early
(defvar zenit-cli--files nil
  "Which files to pass to the CLI.")

;; Remove the -- separator
(pop argv)

;; Sort options and switches
(require 'cl-lib)
(defvar zenit-cli--cmd-switches nil)
(let (options
      rest
      (option-order
       '("help" "clean-straight" "clean" "deploy" "env" "sync" "refresh" "freeze" "validate" "test")))
  (while argv
    (let ((current (pop argv)))
      (if (member current option-order)
          (cl-pushnew current options)
        (push current rest))))
  (setq command-line-args-left
        (append (nreverse rest)
                (sort options
                      (lambda (a b)
                        (< (cl-position a option-order :test #'equal)
                           (cl-position b option-order :test #'equal))))))
  (setq zenit-cli--cmd-switches (nreverse rest)))

;; The core file sets up everything we need
(condition-case e
    (let* ((bin-dir (file-name-directory (file-truename load-file-name)))
           (init-file (expand-file-name "../early-init.el" bin-dir)))
      (or (and (load init-file nil 'nomessage 'nosuffix)
               (featurep 'zenit-core))
          (user-error "Failed to load Emacs from %s" init-file)))
  ;; Prevent ugly backtraces for trivial errors
  (user-error (message "Error: %s" (cadr e))
              (kill-emacs 1)))


;; Add handlers
;; Switches
(cl-pushnew '("--force" . (lambda (&rest _) (setenv "FORCE" "1"))) command-switch-alist)
(cl-pushnew '("-F" . (lambda (&rest _) (setenv "FORCE" "1"))) command-switch-alist)
(add-hook 'command-line-functions (lambda ()
                                    (when (string-match "\\`--force=\\(.*\\)\\'" argi)
                                      (setenv "FORCE" (match-string 1 argi))
                                      t)))

(cl-pushnew '("--debug" . (lambda (&rest _) (setenv "DEBUG" "1"))) command-switch-alist)
(cl-pushnew '("-D" . (lambda (&rest _) (setenv "DEBUG" "1"))) command-switch-alist)
(add-hook 'command-line-functions (lambda ()
                                    (when (string-match "\\`--debug=\\(.*\\)\\'" argi)
                                      (setenv "DEBUG" (match-string 1 argi))
                                      t)))

(cl-pushnew '("--yes" . (lambda (&rest _) (setenv "YES" "1"))) command-switch-alist)
(cl-pushnew '("-y" . (lambda (&rest _) (setenv "YES" "1"))) command-switch-alist)
(add-hook 'command-line-functions (lambda ()
                                    (when (string-match "\\`--yes=\\(.*\\)\\'" argi)
                                      (setenv "YES" (match-string 1 argi))
                                      t)))

(cl-pushnew '("--file" . (lambda (_) (push (pop argv) zenit-cli--files))) command-switch-alist)
(cl-pushnew '("-f" . (lambda (&rest _) (push (pop argv) zenit-cli--files))) command-switch-alist)
(add-hook 'command-line-functions (lambda ()
                                    (when (string-match "\\`--file=\\(.*\\)\\'" argi)
                                      (push (match-string 1 argi) zenit-cli--files)
                                      t)))

;; Options
(cl-pushnew '("help" . (lambda (_)
                         (zenit-cli-redirect-output
                          (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                          (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("help"))))
                          (zenit-cli-show-help))))
            command-switch-alist)
(cl-pushnew '("deploy" . (lambda (_)
                           (zenit-cli-redirect-output
                            (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                            (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("deploy"))))
                            (zenit-cli-deploy))))
            command-switch-alist)
(cl-pushnew '("env" . (lambda (_)
                        (zenit-cli-redirect-output
                         (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                         (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("env"))))
                         (zenit-cli-reload-env-file t))))
            command-switch-alist)
(cl-pushnew '("sync" . (lambda (_)
                         (zenit-cli-redirect-output
                          (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                          (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("sync"))))
                          (zenit-cli-sync))))
            command-switch-alist)
(cl-pushnew '("refresh" . (lambda (_)
                            (zenit-cli-redirect-output
                             (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                             (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("refresh"))))
                             (zenit-cli-refresh))))
            command-switch-alist)
(cl-pushnew '("freeze" . (lambda (_)
                           (zenit-cli-redirect-output
                            (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                            (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("freeze"))))
                            (zenit-cli-freeze-packages))))
            command-switch-alist)
(cl-pushnew '("clean" . (lambda (_)
                          (zenit-cli-redirect-output
                           (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                           (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("clean"))))
                           (zenit-cli-clean-compiled-files))))
            command-switch-alist)
(cl-pushnew '("clean-straight" . (lambda (_)
                                   (zenit-cli-redirect-output
                                    (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                                    (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("clean-straight"))))
                                    (delete-directory
                                     (file-truename (expand-file-name (concat zenit-emacs-dir "straight/repos/straight.el"))) t)
                                    (delete-directory
                                     (file-truename (expand-file-name (concat zenit-emacs-dir "straight/build/straight"))) t)
                                    (print! (warn "Now run 'emacs-config refresh' or 'emacs-config sync'")))))
            command-switch-alist)
;; FIXME 2023-04-28: This needs some work
(cl-pushnew '("validate" . (lambda (_) (print! (warn "Validation currently not working")))) command-switch-alist)
(cl-pushnew '("test" . (lambda (_)
                         (zenit-cli-redirect-output
                          (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
                          (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches '("test"))))
                          (zenit-cli-test zenit-cli--files))))
            command-switch-alist)


;; Abort if the user is using this script as root, unless ~/.emacs.d is owned by
;; root
(when (equal 0 (user-real-uid))
  (unless (equal 0 (file-attribute-user-id (file-attributes zenit-emacs-dir)))
    (message
     (concat
      "Error: this script was executed as root, which is likely not what you want.\n"
      "If this really *is* what you want, then change the owner of your Emacs\n"
      "config to root:\n\n"
      "  chown root:root -R " (abbreviate-file-name zenit-emacs-dir) "\n\n"
      "Aborting..."))
    (kill-emacs 1)))

(defun zenit-cli-show-help ()
  (print-group!
    (print! "Usage: emacs-config [--SWITCHES] [OPTIONS]\n")
    (print! (bold "OPTIONS"))
    (print! "%s\t%s" (bold "deploy") "\tDeploy Emacs configuration")
    (print! "%s\t%s" (bold "env") "\t\tGenerate an env file")
    (print! "%s\t%s" (bold "refresh") (concat "\tRefresh configuration:\n"
                                              "\t\t\t(Re)build packages if necessary and (re)generate autoloads.\n"
                                              "\t\t\tWith FORCE, rebuild all packages"))
    (print! "%s\t%s" (bold "sync") (concat "\t\tDeploy Emacs configuration\n"
                                           "\t\t\tWith FORCE, re-clone and rebuild all packages"))
    (print! "%s\t%s" (bold "freeze") "\tFreeze package versions")
    (print! "%s\t%s" (bold "clean") "\t\tClean .elc files")
    (print! "%s\t%s" (bold "clean-straight") "Delete straight repo and build directories")
    (print! "%s\t%s" (bold "validate") "\tValidate el-patches")
    (print! "%s\t%s" (bold "test") (concat "\t\tTest Emacs configuration\n"
                                           "\t\t\tYou can specify the unit test files with --files"))
    (print! "%s\t%s" (bold "help") "\t\tShow this help message")
    (print! (bold "\nSWITCHES"))
    (print! "%s\t%s" (bold "--file/-f") "Use this file. Can be used multiple times.")
    (print! "%s\t%s" (bold "--debug/-D") "Switch on DEBUG mode")
    (print! "%s\t%s" (bold "--force/-F") "Switch on FORCE")
    (print! "%s\t%s" (bold "--yes/-y") "Answer YES to all prompts"))
  (kill-emacs 0))

(when (null argv)
  (zenit-cli-show-help))
