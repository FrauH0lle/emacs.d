#!/usr/bin/env sh
:; # -*- mode: emacs-lisp; lexical-binding: t -*-
:; case "$EMACS" in *term*) EMACS=emacs ;; *) EMACS="${EMACS:-emacs}" ;; esac
:; [ "$EMACS" = emacs ] && { type emacs >/dev/null 2>&1 || err=1; }
:; [ -n "$err" ] && { echo "Error: failed to run Emacs with command '$EMACS'"; echo; echo "Are you sure Emacs is installed and in your \$PATH?"; exit 1; } >&2
:; emacs="$EMACS ${DEBUG:+--debug-init} -q --no-site-file --batch"
:; $emacs --load "$0" -- "$@" || exit=$?
:; exit $exit

;; The above shebang does the following magic:

;; 1) #!/usr/bin/env sh
;;
;;    This shebang line tells the system to execute this script using the sh
;;    shell found in the system's PATH.

;; 2) :; # -*- mode: emacs-lisp; lexical-binding: t -*-
;;
;;    This line sets the Emacs Lisp mode and enables lexical binding. The :;
;;    part is a shell and Emacs Lisp compatibility trick. In shell, : is a no-op
;;    command, and ; separates commands. In Emacs Lisp, : is a keyword symbol
;;    literal, and ; starts a comment.

;; 3) :; case "$EMACS" in *term*) EMACS=emacs ;; *) EMACS="${EMACS:-emacs}" ;; esac
;;
;;    This line checks if the EMACS environment variable is set and contains
;;    "term". If so, it sets EMACS to "emacs". Otherwise, it sets EMACS to its
;;    current value or "emacs" if not set.

;; 4) :; [ "$EMACS" = emacs ] && { type emacs >/dev/null 2>&1 || err=1; }
;;
;;    This line sets up the EMACS environment variable to contain the Emacs
;;    command. If the command cannot be found, the err variable is set to 1.

;; 5) [ -n "$err" ] && { echo "Error: failed to run Emacs with command '$EMACS'"; echo; echo "Are you sure Emacs is installed and in your \$PATH?"; exit 1; } >&2
;;
;;    If err is not empty, it prints an error message and exits with status code
;;    1.

;; 6) :; emacs="$EMACS ${DEBUG:+--debug-init} -q --no-site-file --batch"
;;
;;    This line sets up the emacs variable to contain the Emacs command with
;;    appropriate flags. If the DEBUG environment variable is set, the
;;    --debug-init flag is added. The -q flag means no initialization file is
;;    loaded, --no-site-file skips loading site files, and --batch runs Emacs in
;;    non-interactive mode.

;; 7) :; $emacs --load "$0" -- "$@" || exit=$?
;;
;;    This line runs Emacs, loading the script itself ($0) and passing any
;;    command-line arguments ("$@"). If the command fails, it stores the exit
;;    status in the exit variable.

;; 8) :; exit $exit
;;
;;    Finally, this line exits the script with the exit status stored in the
;;    exit variable.


;; In CLI sessions, prefer correctness over performance.
(setq load-prefer-newer t)

;; Process command line arguments early
(defvar zenit-cli--files nil
  "Which files to pass to the CLI.")

;; Remove the -- separator
(pop argv)

;; Sort options and switches
(require 'cl-lib)
(defvar zenit-cli--cmd-switches nil)
(let (options
      rest
      (option-order
       '("help" "clean-straight" "clean" "deploy" "env" "sync" "refresh" "freeze" "validate" "test")))
  (while argv
    (let ((current (pop argv)))
      (if (member current option-order)
          (cl-pushnew current options :test #'equal)
        (push current rest))))
  (setq rest (nreverse rest))
  (setq options
        (sort options
              (lambda (a b)
                (< (cl-position a option-order :test #'equal)
                   (cl-position b option-order :test #'equal)))))
  (setq zenit-cli--cmd-switches rest)
  (setq command-line-args-left (append rest options)))

;; The core file sets up everything we need
(condition-case e
    (let* ((bin-dir (file-name-directory (file-truename load-file-name)))
           (init-file (expand-file-name "../early-init.el" bin-dir)))
      (or (and (load init-file nil 'nomessage 'nosuffix)
               (featurep 'zenit-core))
          (user-error "Failed to load Emacs from %s" init-file)))
  ;; Prevent ugly backtraces for trivial errors
  (user-error (message "Error: %s" (cadr e))
              (kill-emacs 1)))

;; Abort if the user is using this script as root, unless ~/.emacs.d is owned by
;; root
(when (equal 0 (user-real-uid))
  (unless (equal 0 (file-attribute-user-id (file-attributes zenit-emacs-dir)))
    (message
     (concat
      "Error: this script was executed as root, which is likely not what you want.\n"
      "If this really *is* what you want, then change the owner of your Emacs\n"
      "config to root:\n\n"
      "  chown root:root -R " (abbreviate-file-name zenit-emacs-dir) "\n\n"
      "Aborting..."))
    (kill-emacs 1)))

;; Switch on `zenit-debug-mode' if requested
(when (or (getenv-internal "DEBUG") init-file-debug)
  (zenit-debug-mode +1))

;; We need to start logging here, otherwise the messages are never shown.
(zenit-log "cli: command line arguments: %s" command-line-args-left)
(zenit-log "cli: zenit-cli--cmd-switches: %s" zenit-cli--cmd-switches)

;; Using `command-switch-alist' and `command-line-functions' turned out to be
;; much more inflexible, especially because of potentially conflicting arguments
;; like --file. In this example, Emacs would prioritize the internal --file
;; command switch which would open the specified file, even if there is another
;; entry in `command-switch-alist'. Thus, we do it on our own.

;; Process command line args
(defvar zenit-cli--cmd-options nil)
(while argv
  (let ((arg (pop argv)))
    (cond
     ;; Switches
     ((or (string= arg "--force")
          (string= arg "-F"))
      (setenv "FORCE" "1") (setq zenit-auto-discard t))
     ((string-match "\\`--force=\\(.*\\)\\'" arg)
      (setenv "FORCE" (match-string 1 arg))
      (setq zenit-auto-discard arg))

     ((or (string= arg "--debug")
          (string= arg "-D"))
      (setenv "DEBUG" "1") (zenit-debug-mode +1))
     ((string-match "\\`--debug=\\(.*\\)\\'" arg)
      (setenv "DEBUG" (match-string 1 arg))
      (zenit-debug-mode +1))

     ((or (string= arg "--yes")
          (string= arg "-y"))
      (setenv "YES" "1") (setq zenit-auto-accept t))
     ((string-match "\\`--yes=\\(.*\\)\\'" arg)
      (setenv "YES" (match-string 1 arg))
      (setq zenit-auto-accept t))

     ((or (string= arg "--file")
          (string= arg "-f"))
      (push (pop argv) zenit-cli--files))
     ((string-match "\\`--file=\\(.*\\)\\'" arg)
      (push (match-string 1 arg) zenit-cli--files))

     ;; We handled --init-directory already in early-init.el and can just ignore
     ;; it here
     ((string= arg "--init-directory")
      (pop argv))
     ((string-match "\\`--init-directory=\\(.*\\)\\'" arg))

     ;; Options
     ((string= arg "deploy")
      (push arg zenit-cli--cmd-options))
     ((string= arg "env")
      (push arg zenit-cli--cmd-options))
     ((string= arg "sync")
      (push arg zenit-cli--cmd-options))
     ((string= arg "refresh")
      (push arg zenit-cli--cmd-options))
     ((string= arg "freeze")
      (push arg zenit-cli--cmd-options))
     ((string= arg "clean")
      (push arg zenit-cli--cmd-options))
     ((string= arg "clean-straight")
      (push arg zenit-cli--cmd-options))
     ((string= arg "validate")
      (push arg zenit-cli--cmd-options))
     ((string= arg "test")
      (push arg zenit-cli--cmd-options))
     ((string= arg "help")
      (push arg zenit-cli--cmd-options))
     ;; Anything else is an error
     (t (print! "%s %s\n" (error "Unknown argument:") arg)
        (print! "%s" (bold "Run emacs-config help to show the documentation."))
        (kill-emacs 1)))))

(defun zenit-cli-show-help ()
  (print-group!
    (print! "Usage: emacs-config [--SWITCHES] [OPTIONS]\n")
    (print! (bold "OPTIONS"))
    (print! "%s\t%s" (bold "deploy") "\tDeploy Emacs configuration")
    (print! "%s\t%s" (bold "env") "\t\tGenerate an env file")
    (print! "%s\t%s" (bold "refresh") (concat "\tRefresh configuration:\n"
                                              "\t\t\t(Re)build packages if necessary and (re)generate autoloads.\n"
                                              "\t\t\tWith FORCE, rebuild all packages"))
    (print! "%s\t%s" (bold "sync") (concat "\t\tDeploy Emacs configuration\n"
                                           "\t\t\tWith FORCE, re-clone and rebuild all packages"))
    (print! "%s\t%s" (bold "freeze") "\tFreeze package versions")
    (print! "%s\t%s" (bold "clean") "\t\tClean .elc files")
    (print! "%s\t%s" (bold "clean-straight") "Delete straight repo and build directories")
    (print! "%s\t%s" (bold "validate") "\tValidate el-patches")
    (print! "%s\t%s" (bold "test") (concat "\t\tTest Emacs configuration\n"
                                           "\t\t\tYou can specify the unit test files with --files"))
    (print! "%s\t%s" (bold "help") "\t\tShow this help message and quit")
    (print! (bold "\nSWITCHES"))
    (print! "%s\t%s" (bold "--file/-f") "Use this file. Can be used multiple times")
    (print! "%s\t%s" (bold "--debug/-D") "Switch on DEBUG mode")
    (print! "%s\t%s" (bold "--force/-F") "Switch on FORCE")
    (print! "%s\t%s" (bold "--yes/-y") "Answer YES to all prompts"))
  (kill-emacs 0))

;; If no command line arguments are found, show help
(when (null zenit-cli--cmd-options)
  (zenit-cli-show-help))

;; Run commands
(zenit-cli-redirect-output
 (add-hook 'kill-emacs-hook #'zenit-cli--output-write-logs-h 95)
 (zenit-log "run: %s" (combine-and-quote-strings (append zenit-cli--cmd-switches zenit-cli--cmd-options)))

 (setq zenit-cli--cmd-options (nreverse zenit-cli--cmd-options))
 (while zenit-cli--cmd-options
   (let ((option (pop zenit-cli--cmd-options)))
     (cond
      ((string= option "deploy")
       (zenit-cli-deploy))
      ((string= option "env")
       (zenit-cli-reload-env-file t))
      ((string= option "sync")
       (zenit-cli-sync))
      ((string= option "refresh")
       (zenit-cli-refresh))
      ((string= option "freeze")
       (zenit-cli-freeze-packages))
      ((string= option "clean")
       (zenit-cli-clean-compiled-files))
      ((string= option "clean-straight")
       (delete-directory (file-truename (expand-file-name (concat zenit-emacs-dir "straight/repos/straight.el"))) t)
       (delete-directory (file-truename (expand-file-name (concat zenit-emacs-dir "straight/build/straight"))) t)
       (print! (warn "Now run 'emacs-config refresh' or 'emacs-config sync'")))
      ((string= option "validate")
       ;; FIXME 2023-04-28: This needs some work
       (print! (warn "Validation currently not implemented")))
      ((string= option "test")
       (zenit-cli-test zenit-cli--files))
      ((string= option "help")
       (zenit-cli-show-help))))))

(kill-emacs 0)
