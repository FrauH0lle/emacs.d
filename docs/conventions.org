#+title: Conventions

* Commit Message Guidelines
- Follow [[https://www.conventionalcommits.org][Conventional Commits]]
- Types:
  - ci: Changes to our CI configuration files and scripts.
  - docs: Documentation only changes.
  - feat: A new feature.
  - fix: A bug fix.
  - pkg: Addition of package or version change.
  - perf: A code change that improves performance.
  - refactor: A code change that neither fixes a bug nor adds a feature.
  - revert: Undoes a previous change. Must be followed by the full subject of
    the reverted commit (and add Revert HASH to FOOTER).
  - style: Changes that do not affect the meaning of the code (white-space,
    formatting, missing semi-colons, etc).
  - test: Adding missing tests or correcting existing tests.
  - tweak: Code changes that changes defaults and user-facing behavior, but not
    drastically.
* Files in ~core/lib~
- Are added to the load path but should be required via ~zenit-require~ as they
  are sub-features of ~zenit-lib~
- However, using them in ~declare-function~ requires their file name, e.g.
  ~zenit-lib-files~
* Async byte compilation
- Order matters!
  - Make sure macros are defined before their use
  - If you use a function in a macro which gets expanded you might need
    `eval-and-compile`
    - See [[help:zenit--fn-crawl]]
- The async process is non-interactive
* Compile-time evaluation
- Remember: ~eval-when-compile~ evaluates its body at compile time AND at load
  time, like progn
  - Same as ~(cl-eval-when (compile load) ...)~
- ~(cl-eval-when (compile) ...)~ evaluates its body ONLY at compile time
  - And needs ~cl-lib~ or ~cl-macs~ at compile time :)
  - Thus, you need ~(eval-when-compile (require 'cl-lib))~ followed by
    ~(cl-eval-when (compile) ...)~
* modulep!
- Use ~zenit-module-p~ instead for everything which is compiled BEFORE init.el
  is processed. ~modulep!~ uses its own API to determine if modules are
  available!
