;; lisp/core/cli/env.el -*- lexical-binding: t; no-byte-compile: t; -*-

(defvar zenit-env-blacklist
  '(;; State that may be problematic if overwritten
    "^HOME$" "^\\(OLD\\)?PWD$" "^SHLVL$" "^PS1$" "^R?PROMPT$" "^TERM\\(CAP\\)?$"
    "^USER$"
    ;; X server or services' variables
    "^DISPLAY$" "^DBUS_SESSION_BUS_ADDRESS$" "^XAUTHORITY$"
    ;; ssh and gpg variables (likely to become stale)
    "^SSH_\\(AUTH_SOCK\\|AGENT_PID\\)$" "^\\(SSH\\|GPG\\)_TTY$"
    "^GPG_AGENT_INFO$"
    ;; Internal envvars
    "^DEBUG$" "^INSECURE$" "^YES$" "^__")
  "Environment variables to not save in `zenit-env-file'.
Each string is a regexp, matched against variable names to omit
from `zenit-env-file'.")

(defvar zenit-env-whitelist '()
  "A whitelist for envvars to save in `zenit-env-file'.
This overrules `zenit-env-blacklist'. Each string is a regexp,
matched against variable names to omit from `zenit-env-file'.")

;;;###autoload
(defun zenit-cli-reload-env-file (&optional force-p env-file whitelist blacklist)
  "Generates `zenit-env-file', if it doesn't exist (or if FORCE-P).
This scrapes the variables from your shell environment by running
`zenit-env-executable' through `shell-file-name' with
`zenit-env-switches'. By default, on Linux, this is '$SHELL -ic
/usr/bin/env'. Variables in `zenit-env-blacklist' are
removed."
  (let ((env-file (expand-file-name (or env-file zenit-env-file))))
    (when (or force-p (not (file-exists-p env-file)))
      (with-temp-file env-file
        (setq-local coding-system-for-write 'utf-8-unix)
        (print! (start "%s envvars file at %S")
                (if (file-exists-p env-file)
                    "Regenerating"
                  "Generating")
                (path env-file))
        (print-group!
         (goto-char (point-min))
         (insert
          (concat
           ";; -*- mode: lisp-interaction; coding: utf-8-unix -*-\n"
           (format ";; Generated from a %s shell environent\n" shell-file-name)
           ";; ---------------------------------------------------------------------------\n"
           ";; This file was auto-generated by `zenit-cli-reload-env-file'. It contains a\n"
           ";; list of environment variables scraped from your default shell\n"
           ";; (excluding variables blacklisted in zenit-env-blacklist).\n"
           ";;\n"
           (if (file-equal-p env-file zenit-env-file)
               (concat ";; It is NOT safe to edit this file. Changes will be overwritten next time you\n"
                       ";; run 'zenit/refresh'. Create a safe-to-edit envvar file in\n"
                       ";; \"~/.emacs.d/myenv\"\n"
                       ";; And load it with (zenit-load-envvars-file \"~/.zenit.d/myenv\").\n")
             (concat ";; This file is safe to edit by hand, but needs to be loaded manually with:\n;;\n"
                     ";;   (zenit-load-envvars-file \"path/to/this/file\")\n;;\n"
                     ";; Use 'zenit/refresh' to regenerate it.\n"))
           "\n"))
         ;; We assume that this noninteractive session was spawned from the
         ;; user's interactive shell, therefore we just dump
         ;; `process-environment' to a file.
         (let ((blacklist (remq nil (append blacklist zenit-env-blacklist)))
               (whitelist (remq nil (append whitelist zenit-env-whitelist))))
           (insert "(")
           (dolist (env (get 'process-environment 'initial-value))
             (catch 'skip
               (let* ((var  (car (split-string env "=")))
                      (pred (zenit-rpartial #'string-match-p var)))
                 (when (seq-find pred blacklist)
                   (if (seq-find pred whitelist)
                       (zenit-log "Whitelisted %s" var)
                     (zenit-log "Ignored %s" var)
                     (throw 'skip t)))
                 (insert (prin1-to-string env) "\n "))))
           (insert ")"))
         (print! (success "Successfully generated %S") (path env-file))
         t)))))
